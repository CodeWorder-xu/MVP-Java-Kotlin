package com.example.greendao.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.xhf.wholeproject.model.entity.res.InfoMessageEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "INFO_MESSAGE_ENTITY".
*/
public class InfoMessageEntityDao extends AbstractDao<InfoMessageEntity, Long> {

    public static final String TABLENAME = "INFO_MESSAGE_ENTITY";

    /**
     * Properties of entity InfoMessageEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Userid = new Property(1, String.class, "userid", false, "USERID");
        public final static Property ImageUrl = new Property(2, String.class, "imageUrl", false, "IMAGE_URL");
        public final static Property Name = new Property(3, String.class, "name", false, "NAME");
        public final static Property NickName = new Property(4, String.class, "nickName", false, "NICK_NAME");
        public final static Property Age = new Property(5, String.class, "age", false, "AGE");
        public final static Property Gender = new Property(6, String.class, "gender", false, "GENDER");
        public final static Property Phone = new Property(7, String.class, "phone", false, "PHONE");
        public final static Property Mailbox = new Property(8, String.class, "mailbox", false, "MAILBOX");
        public final static Property PassWord = new Property(9, String.class, "passWord", false, "PASS_WORD");
        public final static Property Account = new Property(10, String.class, "account", false, "ACCOUNT");
        public final static Property IDNum = new Property(11, String.class, "IDNum", false, "IDNUM");
        public final static Property Birthday = new Property(12, String.class, "birthday", false, "BIRTHDAY");
        public final static Property Token = new Property(13, String.class, "token", false, "TOKEN");
    }


    public InfoMessageEntityDao(DaoConfig config) {
        super(config);
    }
    
    public InfoMessageEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"INFO_MESSAGE_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"USERID\" TEXT," + // 1: userid
                "\"IMAGE_URL\" TEXT," + // 2: imageUrl
                "\"NAME\" TEXT," + // 3: name
                "\"NICK_NAME\" TEXT," + // 4: nickName
                "\"AGE\" TEXT," + // 5: age
                "\"GENDER\" TEXT," + // 6: gender
                "\"PHONE\" TEXT," + // 7: phone
                "\"MAILBOX\" TEXT," + // 8: mailbox
                "\"PASS_WORD\" TEXT," + // 9: passWord
                "\"ACCOUNT\" TEXT," + // 10: account
                "\"IDNUM\" TEXT," + // 11: IDNum
                "\"BIRTHDAY\" TEXT," + // 12: birthday
                "\"TOKEN\" TEXT);"); // 13: token
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_INFO_MESSAGE_ENTITY_USERID ON \"INFO_MESSAGE_ENTITY\"" +
                " (\"USERID\" ASC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"INFO_MESSAGE_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, InfoMessageEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String userid = entity.getUserid();
        if (userid != null) {
            stmt.bindString(2, userid);
        }
 
        String imageUrl = entity.getImageUrl();
        if (imageUrl != null) {
            stmt.bindString(3, imageUrl);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
 
        String nickName = entity.getNickName();
        if (nickName != null) {
            stmt.bindString(5, nickName);
        }
 
        String age = entity.getAge();
        if (age != null) {
            stmt.bindString(6, age);
        }
 
        String gender = entity.getGender();
        if (gender != null) {
            stmt.bindString(7, gender);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(8, phone);
        }
 
        String mailbox = entity.getMailbox();
        if (mailbox != null) {
            stmt.bindString(9, mailbox);
        }
 
        String passWord = entity.getPassWord();
        if (passWord != null) {
            stmt.bindString(10, passWord);
        }
 
        String account = entity.getAccount();
        if (account != null) {
            stmt.bindString(11, account);
        }
 
        String IDNum = entity.getIDNum();
        if (IDNum != null) {
            stmt.bindString(12, IDNum);
        }
 
        String birthday = entity.getBirthday();
        if (birthday != null) {
            stmt.bindString(13, birthday);
        }
 
        String token = entity.getToken();
        if (token != null) {
            stmt.bindString(14, token);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, InfoMessageEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String userid = entity.getUserid();
        if (userid != null) {
            stmt.bindString(2, userid);
        }
 
        String imageUrl = entity.getImageUrl();
        if (imageUrl != null) {
            stmt.bindString(3, imageUrl);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
 
        String nickName = entity.getNickName();
        if (nickName != null) {
            stmt.bindString(5, nickName);
        }
 
        String age = entity.getAge();
        if (age != null) {
            stmt.bindString(6, age);
        }
 
        String gender = entity.getGender();
        if (gender != null) {
            stmt.bindString(7, gender);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(8, phone);
        }
 
        String mailbox = entity.getMailbox();
        if (mailbox != null) {
            stmt.bindString(9, mailbox);
        }
 
        String passWord = entity.getPassWord();
        if (passWord != null) {
            stmt.bindString(10, passWord);
        }
 
        String account = entity.getAccount();
        if (account != null) {
            stmt.bindString(11, account);
        }
 
        String IDNum = entity.getIDNum();
        if (IDNum != null) {
            stmt.bindString(12, IDNum);
        }
 
        String birthday = entity.getBirthday();
        if (birthday != null) {
            stmt.bindString(13, birthday);
        }
 
        String token = entity.getToken();
        if (token != null) {
            stmt.bindString(14, token);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public InfoMessageEntity readEntity(Cursor cursor, int offset) {
        InfoMessageEntity entity = new InfoMessageEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // userid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // imageUrl
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // name
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // nickName
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // age
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // gender
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // phone
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // mailbox
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // passWord
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // account
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // IDNum
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // birthday
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13) // token
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, InfoMessageEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserid(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setImageUrl(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setNickName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setAge(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setGender(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setPhone(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setMailbox(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setPassWord(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setAccount(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setIDNum(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setBirthday(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setToken(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(InfoMessageEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(InfoMessageEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(InfoMessageEntity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
